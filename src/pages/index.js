import Head from 'next/head'
import { Inter } from 'next/font/google'
import { use, useEffect, useState } from 'react';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  
  const [manejoStart , setManejoStart] = useState(false); // Logic for start
  const [character, setCharacter] = useState([]); // Array of the characters
  const [randomCharacter, setRandomCharacter] = useState([]);
  const [selectedCard, setSelectedCard] = useState([]); // Logic for card's flip
  const [selectedPair, setSelectedPair] = useState([]);
  const [matchedPairs, setMatchedPairs] = useState([]);
  const [clicks, setClicks] = useState(0);
  const howManyPairs = 9;


  const manejStart = () => {
    setManejoStart(true);
    setMatchedPairs([]);
    setClicks(0);
  }
  
  
  const baraja = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return ( 
      setRandomCharacter([...array])
    );
  }

  const clickCount = () => {
    setClicks(clicks+1);
    console.log(clicks)
  }

  const getRickAndMortyCharacters = async() => {
    let characterArr = [];

    for(let i = 1; i <= 9; i++){
      const rdm = Math.floor(Math.random() * 826);
    const data = await fetch(`https://rickandmortyapi.com/api/character/${rdm}`, 
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    const res = await data.json();
    // if (characterArr == [])
    // {
    //     return (
    //       <div className='absolute w-full h-full flex justify-center items-center'>
    //       <h1 className='text-2xl text-green-500'>Loading...</h1>
    //     </div>
    //     )
    // }
    characterArr.push(res);
  };
  setCharacter(characterArr);
  baraja(characterArr)
  }
  

  const manageSelectedPair = (e) => {
    clickCount();
    e.preventDefault();
    const id = e.target.id;
    
    selectedPair.push(id);
    document.getElementById("button" + id)
    
    
    if (selectedPair.length === 2) {
      if (
        selectedPair[0] == selectedPair[1] + "-pair" ||
        selectedPair[1] == selectedPair[0] + "-pair"
      ) {
        setMatchedPairs([...matchedPairs, ...selectedPair]);
      }

    console.log(
      "ðŸš€ ~ file: index.js ~ line 80 ~ manageSelectedPair ~ selectedPair",
      selectedPair
    );
    console.log("ðŸš€ ~ file: index.js ~ line 95 ~ manageSelectedPair ~ matchedPairs", matchedPairs)

  }
}

useEffect(() => { // Para retornar el flip de las cartas
  if (selectedPair.length == 2) {
    setSelectedPair([]);
  }
  if (selectedCard.length == 2){
    setTimeout(() => {
      setSelectedCard([]);
    },750);
  }
}, [selectedCard]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={manejoStart ? 'w-full flex justify-center items-center py-6 ' : 'w-full h-[100%] absolute flex justify-center items-center py-6'}>
        <button className='bg-green-500 rounded-md px-4 py-1 m-1 hover:bg-black absolute hover:border-white hover:border'
        onClick={() => {
          getRickAndMortyCharacters();
          manejStart();
        }}>
          Empezar
        </button>
      </div>


      <div className={manejoStart ? 'w-full h-1/2 flex items-center justify-center' : 'hidden'}>
      {character.length >= howManyPairs && (
        <div className='my-12 grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-6 text-center text-white h-1/2 w-[550px] sm:w-[550px] md:w-[650px] lg:w-[1000px]'>
                {character.map((character) => (
                  <button 
                  key={character.id} 
                  id={"button" + character.id}
                  className='border-2 rounded-2xl border-white'
                  onClick={manageSelectedPair}>
                      {/*  manejoFlip  ? 'hidden' :  */}
                      <div onClick={() => {setSelectedCard([...selectedCard, character.id])}} 
                      className={ selectedCard.includes(character.id) || matchedPairs.includes(character.id + "")  ? "opacity-100 h-full w-full flex justify-center items-center":'opacity-0 transition duration-500 h-full w-full flex justify-center items-center'}>
                        <div className='p-2'>
                            <img 
                              className='rounded-lg' 
                              src={character.image} 
                              height={125} width={125}
                              alt=''
                              id={character.id}
                            />
                        </div>
                    </div>
                  </button>
              ))}
              {randomCharacter.map((character) => (
                  <button 
                  key={character.id} 
                  id={"button-" + character.id + "-pair"}
                  className='border-2 rounded-2xl border-white' 
                  onClick={manageSelectedPair}>
                      {/*  manejoFlip  ? 'hidden' :  */}
                      <div onClick={() => {setSelectedCard([...selectedCard, character.id + "-pair"])}} 
                      className={ selectedCard.includes(character.id + "-pair") || matchedPairs.includes(character.id + "-pair")  ?  "opacity-100 h-full w-full flex justify-center items-center":'opacity-0 transition duration-500 h-full w-full flex justify-center items-center'}>
                        <div className='p-2'>
                            <img 
                              className='rounded-lg' 
                              src={character.image} 
                              height={125} width={125}
                              alt=''
                              id={character.id + "-pair"}
                            />
                        </div>
                    </div>
                  </button>
              ))}
        </div>
        )}
      </div>
    </>
  );
  // className={ manejoFlip ? ' m-4 h-[200px] w-[150px]' : 'm-4 duration-1000 h-[200px] w-[150px]' }
}

// export async function getServerSideProps(context){
//   const character = [];
//   for(let i = 1; i <= 10; i++){
//     const rdm = Math.floor(Math.random() * 826);

//     const data = await fetch("https://rickandmortyapi.com/api/character/55", 
//     {
//       method: "GET",
//       headers: {
//         "Content-Type": "application/json",
//       },
//     });
//     const res = await data.json();
//     const character = [];
//     character.push(res)
//     setCharacter(character);
  
//   }

//   return {props:{}};
// }